'fileTypes': ['pv','pvl']
'name': 'ProVerif'
'scopeName': 'proverif'

'patterns': [
  {
    'name': 'comment.multiline'
    'begin': '\\(\\*'
    'end': '\\*\\)'
  }
  {
    'match': '\\b([0-9]+)\\b'
    'captures':
      '1':
        'name': 'constant.numeric'
  }
  {
    'match': '(set)\\s+(\\w+)\\s*='
    'captures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'name': 'support.constant.proverif'
  }
  {
    'match': '(free|const)\\s+((\\w|,|\\s|\')+)\\s*:\\s*((\\w|\')+)\\s*(\\[.+\\])?(\\.)'
    'captures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'patterns': [
          {
            'match': '(\\w|\')+'
            'name': 'entity.name.function.proverif'
          }
        ]
      '4':
        'name': 'entity.name.type.proverif'
      '6':
        'patterns': [
          {
            'include': '#options'
          }
        ]
      '7':
        'name': 'keyword.proverif'
  }
  {
    'match': '(new)\\s+((\\w|\')+)\\s*(\\[.*\\])?\\s*:\\s*((\\w|\')+)\\s*(\\[.+\\])?'
    'name': 'meta.declaration_name'
    'captures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'name': 'entity.name.function.proverif'
      '4':
        'patterns': [
          {
            'include': '#options'
          }
        ]
      '5':
        'name': 'entity.name.type.proverif'
      '7':
        'patterns': [
          {
            'include': '#options'
          }
        ]
  }
  {
    'match': '(fun|event|table|pred|type)\\s+((\\w|\')+)\\s*((\\(.*\\))?\\s*(:\\s*((\\w|\')+))?\\s*(\\[.+\\])?)\\s*(\\.)'
    'name': 'meta.declaration.proverif'
    'captures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'name': 'entity.name.function.proverif'
      '4':
        'patterns': [
          {
            'include': '#options'
          }
          {
            'match': ':\\s*((\\w|\')+)'
            'name': 'meta.type_declaration.proverif'
            'captures':
              '1':
                'name': 'entity.name.type.proverif'
          }
          {
            'include': '#type_declaration'
          }
        ]
      '10':
        'name': 'keyword'
  }
  {
    'begin': '(fun)\\s+((\\w|\')+)\\s*((\\(.+\\))?\\s*(:\\s*((\\w|\')+))?.*)\\n'
    'beginCaptures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'name': 'entity.name.function.proverif'
      '4':
        'patterns': [
          {
            'begin': '\\(\\*'
            'end': '\\*\\)'
            'name': 'comment.block'
          }
          {
            'match': ':\\s*((\\w|\')+)'
            'name': 'meta.type_declaration.proverif'
            'captures':
              '1':
                'name': 'entity.name.type.proverif'
          }
          {
            'include': '#type_declaration'
          }
        ]
    'end': 'reduc'
    'endCaptures':
      '0':
        'name': 'keyword.control.proverif'
    'name': 'meta.declaration_funreduc.proverif'
    'patterns': [
      {
        'begin': '\\(\\*'
        'end': '\\*\\)'
        'name': 'comment.block'
      }
    ]
  }
  {
    'name': 'meta.letfun_declaration.proverif'
    'match': '(letfun)\\s+((\\w|\')+)([^=]*)='
    'captures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'name': 'entity.name.function.proverif'
      '4':
        'patterns': [
          {
            'include': '#arguments'
          }
    ]
  }
  {
    'name': 'meta.let_process_declaration.proverif'
    'match': '(let)\\s+((\\w|\')+)\\s*(\\((:|\\w|\\s|,|\')+\\))?\\s*='
    'captures':
      '1':
        'name': 'keyword.control.proverif'
      '2':
        'name': 'entity.name.function.proverif'
      '4':
        'patterns': [
          {
            'include': '#arguments'
          }
        ]
  }
  {
    'match': '\\b(insert|get|event|if|then|else|suchthat|query|let|new|process|reduc|forall|otherwise|equation|phase|inj-event)\\b'
    'name': 'keyword.control.proverif'
  }
  {
    'match': '\\b(among|channel|choice|clauses|def|diff|elimtrue|equivalence|expand|noninterf|putbegin|nounif|param|proba|proof|sync|weaksecret|sync)\\b'
    'name': 'keyword.control.proverif'
  }
  {
    'match': '\\bfail\\b'
    'name': 'constant.language'
  }
  {
    'match': '\\b(in|out|attacker)(\\s*\\([^\\*]|\\b)'
    'captures':
      '1':
        'name': 'keyword.control.proverif'
  }
  {
    'include': '#boolean'
  }
  {
    'include': '#pattern'
  }
  {
    'match': '(\\||;|\\.)'
    'name': 'keyword'
  }
  {
    'match': 'true|false'
    'name': 'constant.language'
  }
]
'repository':
  'options':
    'patterns': [
      {
        'begin': '\\['
        'end': '\\]'
        'name': 'meta.options_declaration.proverif'
        'patterns': [
          'match': '(\\w|\')+'
          'name': 'entity.name.tag.proverif'
        ]
      }
    ]

  'type_declaration':
    'patterns': [
      {
        'begin': '\\('
        'end': '\\)'
        'name': 'meta.argument_types_declaration.proverif'
        'patterns': [
          'match': '(\\w|\')+'
          'name': 'entity.name.type.proverif'
        ]
      }
    ]

  'arguments':
    'patterns': [
      {
        'begin': '\\('
        'end': '\\)'
        'name': 'meta.arguments_declaration.proverif'
        'patterns': [
          {
            'include': '#pattern'
          }
        ]
      }
    ]

  'pattern':
    'patterns': [
      {
        'match': '((\\w|\')+)\\s*:\\s*((\\w|\')+)'
        'captures':
          '1':
            'name': 'variable.other.proverif'
          '3':
            'name': 'entity.name.type.proverif'
      }
    ]

  'boolean':
    'patterns': [
      {
        'match': '(=|==>|\\|\\||<|<=|>=|>)'
        'captures':
          '1':
            'name': 'support.function.pervasives.boolean-operatons.proverif'
      }
      {
        'match': '\\b(and|not|or)\\b'
        'captures':
          '1':
            'name': 'support.function.pervasives.boolean-operatons.proverif'
      }
    ]
